from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from quiz_data import quiz_data
from database import save_result, get_statistics
import random

class QuizStates(StatesGroup):
    answering = State()

async def start_command(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —Å–µ—Ä—Ñ–µ—Ä! üèÑ‚Äç‚ôÇÔ∏è –ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –∫–æ—Ñ–µ? –ù–∞–∂–º–∏ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –º–∏—Ä –∫–æ—Ñ–µ!")

async def quiz_command(message: types.Message, state: FSMContext):
    await state.update_data(question_index=0, correct_answers=0, questions=random.sample(quiz_data, 10))
    await ask_question(message, state)
    await QuizStates.answering.set()

async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_index = data['question_index']
    questions = data['questions']
    
    if question_index < len(questions):
        question = questions[question_index]['question']
        options = questions[question_index]['options']
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for option in options:
            keyboard.add(option)
        
        await message.answer(f"–í–æ–ø—Ä–æ—Å {question_index + 1} –∏–∑ 10:\n\n{question}", reply_markup=keyboard)
    else:
        await finish_quiz(message, state)

async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    question_index = data['question_index']
    correct_answers = data['correct_answers']
    questions = data['questions']
    
    current_question = questions[question_index]
    if message.text == current_question['correct_option']:
        correct_answers += 1
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, –¥—Ä—É–≥! üéâ –¢—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤!")
    else:
        await message.answer(f"–£–ø—Å! –ù–µ —Å–æ–≤—Å–µ–º —Ç–∞–∫, —Å–µ—Ä—Ñ–µ—Ä. üòÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {current_question['correct_option']}")
    
    await message.answer(f"–¢–≤–æ–π –æ—Ç–≤–µ—Ç: {message.text}", reply_markup=types.ReplyKeyboardRemove())
    
    await state.update_data(question_index=question_index + 1, correct_answers=correct_answers)
    await ask_question(message, state)

async def finish_quiz(message: types.Message, state: FSMContext):
    data = await state.get_data()
    correct_answers = data['correct_answers']
    total_questions = 10
    
    result = f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–µ—Ä—Ñ–µ—Ä! üèÅ\n\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {correct_answers} –∏–∑ {total_questions}"
    
    if correct_answers == total_questions:
        result += "\n\n–í–∞—É! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –∫–æ—Ñ–µ–π–Ω—ã–π –≥—É—Ä—É! ‚òïÔ∏èüëë"
    elif correct_answers >= 7:
        result += "\n\n–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –¢—ã —Ç–æ—á–Ω–æ –ª—é–±–∏—à—å –∫–æ—Ñ–µ! ‚òïÔ∏è‚ù§Ô∏è"
    elif correct_answers >= 5:
        result += "\n\n–ù–µ–ø–ª–æ—Ö–æ! –ù–æ —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å –æ –∫–æ—Ñ–µ –µ—â–µ –±–æ–ª—å—à–µ! üìö‚òïÔ∏è"
    else:
        result += "\n\n–ü–æ—Ö–æ–∂–µ, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–ø–∏—Ç—å –µ—â–µ —á–∞—à–µ—á–∫—É –∏ –ø–æ–¥—É—á–∏—Ç—å —Ç–µ–æ—Ä–∏—é! ‚òïÔ∏èüìñ"

    await message.answer(result, reply_markup=types.ReplyKeyboardRemove())
    
    await save_result(message.from_user.id, correct_answers)
    await state.finish()

async def stats_command(message: types.Message):
    stats = await get_statistics()
    await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤, —Å–µ—Ä—Ñ–µ—Ä! üìä\n\n{stats}")

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(quiz_command, commands=['quiz'])
    dp.register_message_handler(stats_command, commands=['stats'])
    dp.register_message_handler(process_answer, state=QuizStates.answering)